"""Enhanced PDF generation script with multi-page overview, landscape map page, colorful tables, icons, and improved line wrapping."""

import os
import re
from pathlib import Path
from typing import List, Dict

from reportlab.lib.pagesizes import A4, landscape
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import (
    Paragraph, Table, TableStyle, PageBreak, Spacer, Image, BaseDocTemplate,
    Frame, PageTemplate, NextPageTemplate, Flowable
)
from reportlab.lib.styles import ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.units import mm

BASE_DIR = Path(__file__).parent
# Read trip plan from materials folder
TRIP_MD = BASE_DIR / 'materials' / 'trip_plan.md'
OUTPUT_PDF = BASE_DIR / '„Ää2025ÈªëÈæôÊ±üÊóÖË°åÊâãÂÜå„Äã.pdf'

FONT_PATHS = [
    'C:/Windows/Fonts/msyh.ttc',  # ÂæÆËΩØÈõÖÈªë
    'C:/Windows/Fonts/simsun.ttc',
    'C:/Windows/Fonts/simhei.ttf'
]
FONT_NAME = 'HandbookFont'

SPOT_INTRO: Dict[str, str] = {
    '‰∏≠Â§ÆÂ§ßË°ó': 'ÂßãÂª∫ 1900 Âπ¥ÂâçÂêéÊ¨ßÂºèÂª∫Á≠ëÁæ§ÔºåË¢´Ë™â‰∏∫‚Äú‰∏úÊñπÂ∞èÂ∑¥Èªé‚ÄùÔºåÊôöÈó¥ÁÅØÂÖâÂ±ÇÊ¨°Â•Ω„ÄÇ',
    'ÈªëÈæôÊ±üÁúÅÂçöÁâ©È¶Ü': 'Ëá™ÁÑ∂‰∏é‰∫∫ÊñáÂÖºÊúâÔºåÁåõÁä∏Ë±°ÂåñÁü≥/‰∏úÂåóËôéÊ†áÊú¨ÂøÖÁúãÔºåÂë®‰∏ÄÈó≠È¶Ü„ÄÇ',
    'Âú£¬∑Á¥¢Ëè≤‰∫öÊïôÂ†Ç': 'ÊãúÂç†Â∫≠È£éÊ†ºÂú∞Ê†áÔºåÂ§ñËßÇÊãçÊëÑ 17:00 ÈáëËâ≤ÂÖâÔºåÂÜÖÈÉ®Â§öÂ™í‰ΩìÂ±ïÁ§∫„ÄÇ',
    'Â§™Èò≥Â≤õ': 'Ê±üÂøÉÁªøÊ¥≤ÔºåÈ™ëË°å/Ê≠•Ë°åÊ∏ÖÂáâÔºåÂçàÂêéÊö¥ÊôíÈúÄÊ≥®ÊÑèË°•Ê∞¥„ÄÇ',
    '‰∏úÂåóËôéÊûóÂõ≠': '‰πòÁ¨ºËΩ¶ËøëË∑ùÁ¶ªËßÇÂØü‰∏úÂåóËôéÔºåÁ¶ÅÊ≠¢Êï≤ÊâìËΩ¶Á™ó‰∏éÊäïÂñÇ„ÄÇ',
    'ÊâéÈæôÊπøÂú∞': '‰∏πÈ°∂Èπ§Ê†ñÊÅØÂú∞ÔºåÊîæÈ£ûË°®ÊºîÈúÄÊèêÂâçÊäµËææÔºåÈïøÁÑ¶‰∏éÊúõËøúÈïúÂ¢û‰ΩìÈ™å„ÄÇ',
    'ÈªëÈæôÂ±±': 'Êñ∞ÊúüÁÅ´Â±±ÔºåÁéØÂΩ¢ÁÅ´Â±±Âè£+ÁÜîÂ≤©Âè∞Âú∞Ê∏ÖÊô∞ÔºåÁ¢éÁü≥Âù°Ê≥®ÊÑèÈûãÂ∫ïÊäìÂú∞Âäõ„ÄÇ',
    'ÂåóÈ•ÆÊ≥â': 'ÂÜ∑ÁüøÊ≥âÁé∞Âú∫Áõ¥È•ÆÔºåÊê∫Ê¥ÅÂáÄÁì∂ÂèñÊ∞¥‰∏ç‰πÖÁΩÆÈ´òÊ∏©ÁéØÂ¢É„ÄÇ',
    'Áë∑Áè≤ÂéÜÂè≤ÈôàÂàóÈ¶Ü': '‰∫ÜËß£‰∏≠‰øÑËæπÁïåÊù°Á∫¶ÂèäËæπÂüéÂéÜÂè≤ËÉåÊôØÔºåÂ¢ûÂº∫ÈªëÊ≤≥‰∫∫ÊñáÊ∑±Â∫¶„ÄÇ',
    'ÈªëÈæôÊ±üÂÖ¨Âõ≠': 'ÁïåÊ≤≥Ê±üÁïîÔºåÊó•ËêΩÊñúÂÖâÊãçÂØπÂ≤∏ÂüéÂ∏ÇÂâ™ÂΩ±‰Ω≥„ÄÇ',
    'ËåÖÂÖ∞Ê≤ü': 'Â≥°Ë∞∑Ê∫™ÊµÅ+ÁÄëÂ∏ÉÂ§çÂêàÊôØËßÇÔºåÈõ®ÂêéË∑ØÊªëÂáèÈÄüË°åËµ∞„ÄÇ',
    'Ê±§Êó∫Ê≤≥ÊûóÊµ∑Â•áÁü≥': 'Ëä±Â≤óÂ≤©Áü≥ÊûóÂ•áÂºÇÈÄ†Âûã+Ê£ÆÊûóÊ≠•ÈÅìÁªìÂêàÔºåÈÄÇÂ∫¶Âà†ÊîØÁ∫øÈò≤Áñ≤Âä≥„ÄÇ',
    '‰∫îËê•ÂõΩÂÆ∂Ê£ÆÊûóÂÖ¨Âõ≠': 'Á∫¢ÊùæÊØçÊ†ëÊûóÁîüÊÄÅÂÆåÊï¥ÔºåÊ£ÆÊûóÊµ¥ÂëºÂê∏ËäÇÂ•èÊîæÊÖ¢„ÄÇ',
    '‰πùÂ≥∞Â±±ÂÖªÂøÉË∞∑': 'Ê¢ÖËä±Èπø‰∫íÂä®‰∏éÈùôÂøÉÊ≠•ÈÅìÔºåÊó©Âú∫ÂÖâÁ∫øÊüîÂíåÈπøÊõ¥Ê¥ªË∑É„ÄÇ'
}

# ---------- Styles ----------
SECTION_TITLE = ParagraphStyle(
    'SectionTitle', fontName=FONT_NAME, fontSize=22, leading=28,
    textColor=colors.HexColor('#0B3954'), spaceAfter=10)
SUBTITLE = ParagraphStyle(
    'Subtitle', fontName=FONT_NAME, fontSize=14, leading=20,
    textColor=colors.HexColor('#1565C0'), spaceAfter=6)
BODY = ParagraphStyle(
    'Body', fontName=FONT_NAME, fontSize=10.5, leading=15.2, spaceAfter=3)
SMALL = ParagraphStyle(
    'Small', fontName=FONT_NAME, fontSize=9, leading=12, textColor=colors.HexColor('#455A64'))
QUOTE = ParagraphStyle(
    'Quote', parent=BODY, backColor=colors.HexColor('#E3F2FD'),
    borderColor=colors.HexColor('#64B5F6'), borderWidth=0.6, borderPadding=5,
    leftIndent=4, rightIndent=4, spaceBefore=4, spaceAfter=8)


def register_font():
    for p in FONT_PATHS:
        if os.path.exists(p):
            try:
                pdfmetrics.registerFont(TTFont(FONT_NAME, p))
                return
            except Exception:
                continue
    raise FileNotFoundError('Êú™ÊâæÂà∞‰∏≠ÊñáÂ≠ó‰ΩìÔºåËØ∑Ë∞ÉÊï¥ FONT_PATHS„ÄÇ')


def parse_trip_markdown(md: str) -> List[Dict]:
    days = []
    current = None
    for line in md.splitlines():
        if line.startswith('### Day '):
            if current:
                days.append(current)
            current = {'title': line.replace('### ', '').strip(), 'lines': []}
        elif current is not None:
            current['lines'].append(line)
    if current:
        days.append(current)
    # enrich
    for d in days:
        block = '\n'.join(d['lines'])
        m = re.search(r'\*\*(\d{4}Âπ¥[^*]+)\*\*', block)
        if m:
            d['date'] = m.group(1)
        m2 = re.search(r'ÂΩìÊó•ÊÄªËßà:.*?\n\*\*(.*?)\*\*', block)
        # fallback simpler pattern
        if not m2:
            m2 = re.search(r'ÂΩìÊó•ÊÄªËßà.*?\n', block)
        # timeline
        timeline = []
        capture = False
        for l in d['lines']:
            if 'ËØ¶ÁªÜÊó∂Èó¥Á∫ø' in l:
                capture = True
                continue
            if capture:
                if l.startswith('**‰ºòÂåñ') or l.startswith('---') or l.startswith('### Day'):
                    break
                if l.strip().startswith('- '):
                    timeline.append(l.strip()[2:])
        d['timeline'] = timeline
        # summary simpler
        ms = re.search(r'ÂΩìÊó•ÊÄªËßà:\*\*? ?([^\n]+)', block)
        if ms:
            d['summary'] = ms.group(1).strip()
    return days


def split_overview_rows(rows: List[List[str]], max_rows: int = 15) -> List[List[List[str]]]:
    pages = []
    header, data = rows[0], rows[1:]
    for i in range(0, len(data), max_rows):
        pages.append([header] + data[i:i+max_rows])
    return pages


def build_overview_pages(days: List[Dict]) -> List:
    rows = [['Êó•Á®ã', 'Êó•Êúü', '‰∫ÆÁÇπ', 'ÊèêË¶Å']]
    for d in days:
        summary = d.get('summary', '')
        tags = [k for k in ['ÁÅ´Â±±', 'ÊπøÂú∞', 'Ê£ÆÊûó', 'ÂüéÂ∏Ç', 'ÊñáÂåñ', 'ËæπÂ¢É', 'ÂæíÊ≠•', 'Ëá™È©æ'] if k in summary]
        rows.append([d.get('title',''), d.get('date',''), ' / '.join(tags) if tags else '‚Äî', summary[:140] + ('...' if len(summary)>140 else '')])
    tablesets = split_overview_rows(rows, max_rows=11)
    flow = []
    for idx, tbl_rows in enumerate(tablesets):
        flow.append(Paragraph(f'Ë°åÁ®ãÊ¶ÇËßàË°®ÔºàÁ¨¨ {idx+1}/{len(tablesets)} È°µÔºâ', SUBTITLE))
        table = Table(tbl_rows, colWidths=[38*mm, 32*mm, 18*mm, 87*mm])
        table.setStyle(TableStyle([
            ('FONTNAME',(0,0),(-1,-1),FONT_NAME),
            ('FONTSIZE',(0,0),(-1,0),10),
            ('BACKGROUND',(0,0),(-1,0),colors.HexColor('#BBDEFB')),
            ('TEXTCOLOR',(0,0),(-1,0),colors.HexColor('#0D47A1')),
            ('GRID',(0,0),(-1,-1),0.3,colors.HexColor('#90CAF9')),
            ('ROWBACKGROUNDS',(0,1),(-1,-1),[colors.white, colors.HexColor('#E3F2FD')]),
            ('ALIGN',(0,0),(-1,0),'CENTER'),
            ('VALIGN',(0,0),(-1,-1),'TOP'),
            ('FONTSIZE',(0,1),(-1,-1),9)
        ]))
        flow.append(table)
        flow.append(PageBreak())
    return flow


def build_timeline_table(timeline: List[str]):
    if not timeline:
        return Paragraph('ÔºàÊó†Êó∂Èó¥Á∫øÊï∞ÊçÆÔºâ', BODY)
    data = [['Êó∂Èó¥', 'Ê¥ªÂä® / ËØ¥Êòé']]
    pat = re.compile(r'^(\d{1,2}:\d{2})[\s\-‚Äî‚Äì]*(.*)')
    for row in timeline:
        m = pat.match(row)
        if m:
            t, desc = m.group(1), m.group(2).strip()
        else:
            t, desc = '‚Äî', row
        data.append([t, desc])
    table = Table(data, colWidths=[20*mm, 150*mm])
    table.setStyle(TableStyle([
        ('FONTNAME',(0,0),(-1,-1),FONT_NAME),
        ('BACKGROUND',(0,0),(-1,0),colors.HexColor('#C8E6C9')),
        ('TEXTCOLOR',(0,0),(-1,0),colors.HexColor('#1B5E20')),
        ('GRID',(0,0),(-1,-1),0.25,colors.HexColor('#A5D6A7')),
        ('ROWBACKGROUNDS',(0,1),(-1,-1),[colors.white, colors.HexColor('#F1F8E9')]),
        ('FONTSIZE',(0,0),(-1,0),10),
        ('FONTSIZE',(0,1),(-1,-1),9.2),
        ('VALIGN',(0,0),(-1,-1),'MIDDLE')
    ]))
    return table


def spot_reference(text: str):
    spots = [s for s in SPOT_INTRO if s in text]
    if not spots:
        return Paragraph('ÔºàÊú™ÂåπÈÖçÂà∞ÊôØÁÇπÂÖ≥ÈîÆÂ≠óÔºâ', QUOTE)
    lines = [f'üìç <b>{s}</b>Ôºö{SPOT_INTRO[s]}' for s in spots]
    return Paragraph('<br/>'.join(lines), QUOTE)


def footer(canvas, doc):
    canvas.setFont(FONT_NAME, 8)
    canvas.setFillColor(colors.HexColor('#607D8B'))
    canvas.drawRightString(doc.pagesize[0]-15*mm, 10*mm, f'Page {doc.page}')


def add_city_overview_page(story: List, title: str, desc: str, img_path: Path, use_landscape: bool = True):
    """Add a city overview page with big map and brief intro."""
    if not img_path.exists():
        # fallback portrait text only
        story.append(Paragraph(title, SECTION_TITLE))
        if desc:
            story.append(Paragraph(desc, BODY))
        story.append(PageBreak())
        return
    if use_landscape:
        story.append(NextPageTemplate('Landscape'))
        story.append(PageBreak())
        story.append(Paragraph(title, SECTION_TITLE))
        if desc:
            story.append(Paragraph(desc, BODY))
        lw, lh = landscape(A4)
        story.append(Image(str(img_path), width=lw-40*mm, height=lh-60*mm))
        story.append(NextPageTemplate('Portrait'))
        story.append(PageBreak())
    else:
        story.append(Paragraph(title, SECTION_TITLE))
        if desc:
            story.append(Paragraph(desc, BODY))
        pw, ph = A4
        story.append(Image(str(img_path), width=pw-40*mm, height=ph/2))
        story.append(PageBreak())


def add_topic_page(story: List, title: str, desc: str, img_path: Path | None = None, use_landscape: bool = False):
    story.append(Paragraph(title, SECTION_TITLE))
    if desc:
        story.append(Paragraph(desc, BODY))
    if img_path and img_path.exists():
        if use_landscape:
            story.append(NextPageTemplate('Landscape'))
            story.append(PageBreak())
            story.append(Paragraph(title + 'ÔºàÂõæÁ§∫Ôºâ', SUBTITLE))
            lw, lh = landscape(A4)
            story.append(Image(str(img_path), width=lw-40*mm, height=lh-60*mm))
            story.append(NextPageTemplate('Portrait'))
        else:
            pw, ph = A4
            story.append(Image(str(img_path), width=pw-40*mm, height=ph/2))
    story.append(PageBreak())


def generate_pdf():
    register_font()
    md = TRIP_MD.read_text(encoding='utf-8')
    days = parse_trip_markdown(md)

    portrait = A4
    landscape_pg = landscape(A4)
    pw, ph = portrait
    lw, lh = landscape_pg
    frame_portrait = Frame(18*mm, 18*mm, pw-36*mm, ph-36*mm, id='F')
    frame_land = Frame(18*mm, 18*mm, lw-36*mm, lh-36*mm, id='L')
    doc = BaseDocTemplate(str(OUTPUT_PDF), pageTemplates=[
        PageTemplate(id='Portrait', frames=[frame_portrait], pagesize=portrait, onPage=footer),
        PageTemplate(id='Landscape', frames=[frame_land], pagesize=landscape_pg, onPage=footer)
    ], leftMargin=18*mm, rightMargin=18*mm, topMargin=18*mm, bottomMargin=18*mm)

    story: List = []
    # Cover
    story.append(Paragraph('2025 ÈªëÈæôÊ±üÊóÖË°åÊâãÂÜå', SECTION_TITLE))
    story.append(Paragraph('ÊâìÂç∞ÂΩ©Ëâ≤Áâà | ÈÄÇÁî®Êó•ÊúüÔºö2025/08/16 - 08/24', SUBTITLE))
    story.append(Paragraph('ÁâàÊú¨ÔºöV3ÔºàÂ§öÈ°µÊ¶ÇËßà + ÂüéÂ∏ÇÂú∞ÂõæÊ®™ÁâàÔºâ', SMALL))
    story.append(Spacer(1, 8))
    # ÁõÆÂΩï
    toc_lines = [f'‚Ä¢ {d.get("title","")}  ‚Äî‚Äî  {d.get("date","")}' for d in days]
    story.append(Paragraph('ÁõÆÂΩï / Âø´ÈÄüÁ¥¢Âºï', SUBTITLE))
    story.append(Paragraph('<br/>'.join(toc_lines), BODY))
    story.append(PageBreak())

    # Overview tables
    story.extend(build_overview_pages(days))

    # Overview image page (portrait)
    overview_img = BASE_DIR / 'materials' / 'Ë°åÁ®ãÊÄªËßàÂõæ.png'
    if overview_img.exists():
        story.append(Paragraph('Ë°åÁ®ãÊÄªËßàÂõæ', SUBTITLE))
        story.append(Image(str(overview_img), width=pw-50*mm, height=ph/2))
        story.append(PageBreak())

    # ÂüéÂ∏ÇÂ§ßÂõæÂ∞ÜÁ©øÊèíÂú®ÂÖ∑‰ΩìÊó•Á®ãÂêéÊåâÈúÄÊèíÂÖ•Ôºå‰∏çÂú®Ê≠§Â§ÑÁªü‰∏ÄÂ±ïÁ§∫

    # Daily sections
    detail_dir = BASE_DIR / 'materials' / 'details'
    for d in days:
        story.append(Paragraph(d['title'], SECTION_TITLE))
        if d.get('date'):
            story.append(Paragraph('üìÖ ' + d['date'], SUBTITLE))
        if d.get('summary'):
            story.append(Paragraph('üß≠ ' + d['summary'], BODY))
        story.append(Paragraph('‚è± ËØ¶ÁªÜÊó∂Èó¥Á∫ø', SUBTITLE))
        story.append(build_timeline_table(d.get('timeline', [])))
        story.append(Paragraph('üó∫ ÊôØÁÇπÈÄüËßà‰∏éÂØºÊ∏∏ÊèêÁ§∫', SUBTITLE))
        story.append(spot_reference('\n'.join(d['lines'])))
        # Images
        dm = re.match(r'Day (\d+):', d['title'])
        if dm:
            dn = dm.group(1)
            imgs = sorted(detail_dir.glob(f'{dn}-map-*.png'))
            for i, ip in enumerate(imgs):
                story.append(Image(str(ip), width=pw-60*mm, height=ph/3))
                if (i+1) % 2 == 0 and i+1 != len(imgs):
                    story.append(PageBreak())
        story.append(PageBreak())

        # Insert required extra pages after specific days
        dm = re.match(r'Day (\d+):', d['title'])
        day_no = int(dm.group(1)) if dm else -1
        materials_dir = BASE_DIR / 'materials'
        if day_no == 2:
            # Leaving Harbin with city map
            add_city_overview_page(
                story,
                'ÂÜç‰ºö¬∑ÂÜ∞ÂüéÂìàÂ∞îÊª®',
                '‰∏§Â§©ÁöÑÂüéÂ∏ÇËßÇÂØüÔºå‰ªé‚ÄúËøú‰∏úÂ∞èÂ∑¥Èªé‚ÄùÁöÑÂéÜÂè≤Âª∫Á≠ëÂà∞ÊùæËä±Ê±üÁïîÁöÑÁé∞‰ª£Ê¥ªÂäõÔºåÂìàÂ∞îÊª®‰ª•Áã¨ÁâπÁöÑ‰∏≠Ë•øÂêàÁíßÊ∞îË¥®Áïô‰∏ãÊ∑±ÂàªÂç∞ËÆ∞„ÄÇ‰∏ãÈù¢ËøôÂº†ÂÖ®Â∏ÇÂú∞ÂõæÂèØÂ∏ÆÂä©‰Ω†ÂõûÈ°æÂ∑≤Âà∞ËÆøÁöÑÂú∞Ê†áÔºåÂπ∂ËßÑÂàíÊú™Êù•ÁöÑÂÜçÊ¨°ÈÄ†ËÆøË∑ØÁ∫ø„ÄÇ',
                materials_dir / 'ÂìàÂ∞îÊª®Â∏ÇÊóÖÊ∏∏Âú∞Âõæ.jpg',
                use_landscape=True
            )
        elif day_no == 3:
            # Qiqihar city overview with map
            add_city_overview_page(
                story,
                'Èπ§ÂüéÈΩêÈΩêÂìàÂ∞îÂÖ®Ëßà',
                'ÈΩêÈΩêÂìàÂ∞î‰∏ç‰ªÖÊúâÊâéÈæôÊπøÂú∞ÁöÑ‰∏πÈ°∂Èπ§ÔºåÊõ¥ÊòØ‰∏ÄÂ∫ßÊã•ÊúâÂéöÂÆûÂ∑•‰∏öÂ∫ïËï¥‰∏éËçâÂéüÈ£éÊÉÖÁöÑÂüéÂ∏Ç„ÄÇËØ∑Âú®Âú∞Âõæ‰∏äÂÆö‰ΩçÊâéÈæô‰øùÊä§Âå∫„ÄÅÂ´©Ê±ü‰∏éÂüéÂ∏Ç‰∏ªËΩ¥ÔºåÁêÜËß£ÂüéÂ∏Ç‰∏éÊπøÂú∞ÁöÑÁ©∫Èó¥ÂÖ≥Á≥ª„ÄÇ',
                materials_dir / 'ÈΩêÈΩêÂìàÂ∞îÊóÖÊ∏∏Âõæ.jpg',
                use_landscape=True
            )
        elif day_no == 4:
            # Heihe overview ahead of day 5
            add_city_overview_page(
                story,
                'ÈªëÊ≤≥ÂüéÂ∏ÇÈ∏üÁû∞',
                '‰Ωç‰∫éÈªëÈæôÊ±üÔºàÈòøÁ©ÜÂ∞îÊ≤≥ÔºâÁïîÁöÑÂè£Â≤∏ÂüéÂ∏ÇÔºå‰∏éÂØπÂ≤∏‰øÑÁΩóÊñØÂüéÂ∏ÇÈöîÊ±üÁõ∏Êúõ„ÄÇËØ∑Âú®Âú∞Âõæ‰∏äÊâæÂà∞Âè£Â≤∏„ÄÅÁë∑Áè≤ËÄÅÂüéÂèäÊ≤øÊ±üÊ≠•ÈÅìÔºå‰∫ÜËß£ËæπÂ¢ÉÂüéÂ∏ÇÁöÑÁ©∫Èó¥Ê†ºÂ±Ä„ÄÇ',
                materials_dir / 'ÈªëÊ≤≥ÊóÖÊ∏∏Âõæ.jpg',
                use_landscape=True
            )
        elif day_no == 5:
            # Hu Huanyong Line topic page
            add_topic_page(
                story,
                '‰∏ìÈ¢ò¬∑ËÉ°ÁÑïÂ∫∏Á∫øËØ¶Ëß£',
                'ËÉ°ÁÑïÂ∫∏Á∫øÊè≠Á§∫‰∫Ü‰∏≠ÂõΩ‰∫∫Âè£‰∏éÁªèÊµéÁöÑÁ©∫Èó¥ÂàÜÂ∏ÉÂ∑ÆÂºÇ„ÄÇÊú¨Ê¨°Ë°åÁ®ãÂ§ö‰Ωç‰∫éÁ∫øÁöÑË•øÂåó‰æßÔºöÂú∞Âπø‰∫∫Á®Ä„ÄÅÊπøÂú∞‰∏éÁÅ´Â±±Âú∞Ë≤å‰∏∞ÂØå„ÄÇËØ∑ÁªìÂêàÊâÄËßÅÊÄùËÄÉÔºöËá™ÁÑ∂Âú∞ÁêÜÂ¶Ç‰ΩïÂ°ëÈÄ†ËÅöËêΩÂàÜÂ∏É‰∏é‰∫ß‰∏öÂΩ¢ÊÄÅÔºü',
                materials_dir / 'ËÉ°ÁÑïÂ∫∏Á∫ø.png',
                use_landscape=True
            )
        elif day_no == 6:
            # Yichun overview page
            add_city_overview_page(
                story,
                'ÊûóÈÉΩ‰ºäÊò•ÂÖ®ÊôØ',
                '‰∏ÄÂ∫ß‰∏éÊ£ÆÊûóÂÖ±ÁîüÁöÑÂüéÂ∏Ç„ÄÇ‰ªéÁ∫¢ÊùæÊØçÊ†ëÊûóÂà∞Â•áÁü≥Âú∞Ë≤åÔºåÊûó‰∏öÂéÜÂè≤‰∏éÁîüÊÄÅ‰øùÊä§Âú®ËøôÈáå‰∫§Áªá„ÄÇËØ∑Âú®Âú∞Âõæ‰∏äÊâæÂà∞Ê±§Êó∫Ê≤≥„ÄÅ‰∫îËê•Á≠âÈáçË¶ÅÊ£ÆÊûóÊôØÂå∫„ÄÇ',
                materials_dir / '‰ºäÊò•ÊóÖÊ∏∏Âõæ.jpg',
                use_landscape=True
            )
        elif day_no == 8:
            # Reflection/open questions page
            q_text = (
                'ÂºÄÊîæÊÄùËÄÉÔºö<br/>'
                '1) Âì™‰∏ÄÂ§ÑËá™ÁÑ∂ÊôØËßÇÊúÄ‰ª§‰Ω†ÈúáÊíºÔºüÂ∞ùËØïÊèèËø∞ÂÆÉ‰∏éÂú∞Ë¥®/ÁîüÊÄÅÁöÑËÅîÁ≥ª„ÄÇ<br/>'
                '2) ËæπÂ¢ÉÂüéÂ∏Ç‰∏éÂÜÖÈôÜÂüéÂ∏ÇÂú®Ë°óÊôØ‰∏éËØ≠Ë®Ä‰∏äÊúâÂì™‰∫õ‰∏çÂêåÔºü<br/>'
                '3) Â¶ÇÊûú‰∏∫ÊúãÂèãËÆæËÆ°‰∏ÄÊù°‚ÄúÈªëÈæôÊ±ü‰∏ªÈ¢òË∑ØÁ∫ø‚ÄùÔºå‰Ω†ÁöÑ3‰∏™‰∏ªÈ¢òÁ´ôÁÇπÊòØ‰ªÄ‰πàÔºü‰∏∫‰ªÄ‰πàÔºü<br/>'
                '4) ÈÄâÊã©‰∏ÄÂº†Âú∞ÂõæÔºåÊ†áÂá∫‰Ω†ËÆ§‰∏∫ÊúÄÊúâÁ†îÁ©∂‰ª∑ÂÄºÁöÑÂú∞ÁÇπÔºåÂπ∂ÂÜô‰∏ã‰Ω†ÁöÑËßÇÂØüÊèêÁ∫≤„ÄÇ'
            )
            add_topic_page(story, 'Êé¢Èô©ÂõûÂìç¬∑ÊÄùËÄÉ‰∏éÊÄªÁªì', q_text)

    # Appendix
    story.append(Paragraph('ÈôÑÂΩïÔºöÂÆâÂÖ®‰∏éË£ÖÂ§áË¶ÅÁÇπ', SECTION_TITLE))
    story.append(Paragraph('‚òë Ë°•Ê∞¥ / Èò≤Êôí / Èò≤Ëöä ¬∑ ‚õÖ Èõ∑ÈòµÈõ®ËøúÁ¶ªÈ´òÂ§Ñ ¬∑ üöó Ëá™È©æ 120 ÂàÜÈíü‰ºëÊÅØ ¬∑ üì∏ ÊØèÊôöÂèåÂ§á‰ªΩÁÖßÁâá ¬∑ ü•æ ÂæíÊ≠•ÂâçÁÉ≠Ë∫´ÂêéÊãâ‰º∏„ÄÇ', BODY))

    doc.build(story)
    print(f'Â∑≤ÁîüÊàê PDF: {OUTPUT_PDF}')


if __name__ == '__main__':
    generate_pdf()
